// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: proto/stats/v1/stats.proto

package stats_gen_v1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Временной диапазон для статистики
type TimeRange int32

const (
	TimeRange_TIME_RANGE_UNSPECIFIED   TimeRange = 0 // Не указано
	TimeRange_TIME_RANGE_LAST_1_HOUR   TimeRange = 1 // Последний час
	TimeRange_TIME_RANGE_LAST_24_HOURS TimeRange = 2 // Последние 24 часа
	TimeRange_TIME_RANGE_LAST_7_DAYS   TimeRange = 3 // Последние 7 дней
	TimeRange_TIME_RANGE_LAST_30_DAYS  TimeRange = 4 // Последние 30 дней
	TimeRange_TIME_RANGE_LAST_90_DAYS  TimeRange = 5 // Последние 90 дней
	TimeRange_TIME_RANGE_LAST_180_DAYS TimeRange = 6 // Последние 180 дней
	TimeRange_TIME_RANGE_LAST_1_YEAR   TimeRange = 7 // Последний год
)

// Enum value maps for TimeRange.
var (
	TimeRange_name = map[int32]string{
		0: "TIME_RANGE_UNSPECIFIED",
		1: "TIME_RANGE_LAST_1_HOUR",
		2: "TIME_RANGE_LAST_24_HOURS",
		3: "TIME_RANGE_LAST_7_DAYS",
		4: "TIME_RANGE_LAST_30_DAYS",
		5: "TIME_RANGE_LAST_90_DAYS",
		6: "TIME_RANGE_LAST_180_DAYS",
		7: "TIME_RANGE_LAST_1_YEAR",
	}
	TimeRange_value = map[string]int32{
		"TIME_RANGE_UNSPECIFIED":   0,
		"TIME_RANGE_LAST_1_HOUR":   1,
		"TIME_RANGE_LAST_24_HOURS": 2,
		"TIME_RANGE_LAST_7_DAYS":   3,
		"TIME_RANGE_LAST_30_DAYS":  4,
		"TIME_RANGE_LAST_90_DAYS":  5,
		"TIME_RANGE_LAST_180_DAYS": 6,
		"TIME_RANGE_LAST_1_YEAR":   7,
	}
)

func (x TimeRange) Enum() *TimeRange {
	p := new(TimeRange)
	*p = x
	return p
}

func (x TimeRange) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TimeRange) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stats_v1_stats_proto_enumTypes[0].Descriptor()
}

func (TimeRange) Type() protoreflect.EnumType {
	return &file_proto_stats_v1_stats_proto_enumTypes[0]
}

func (x TimeRange) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TimeRange.Descriptor instead.
func (TimeRange) EnumDescriptor() ([]byte, []int) {
	return file_proto_stats_v1_stats_proto_rawDescGZIP(), []int{0}
}

// Период агрегации данных
type AggregationPeriod int32

const (
	AggregationPeriod_AGGREGATION_PERIOD_UNSPECIFIED AggregationPeriod = 0 // Не указан
	AggregationPeriod_AGGREGATION_PERIOD_MINUTE      AggregationPeriod = 1 // По минутам
	AggregationPeriod_AGGREGATION_PERIOD_HOUR        AggregationPeriod = 2 // По часам
	AggregationPeriod_AGGREGATION_PERIOD_DAY         AggregationPeriod = 3 // По дням
	AggregationPeriod_AGGREGATION_PERIOD_WEEK        AggregationPeriod = 4 // По неделям
	AggregationPeriod_AGGREGATION_PERIOD_MONTH       AggregationPeriod = 5 // По месяцам
)

// Enum value maps for AggregationPeriod.
var (
	AggregationPeriod_name = map[int32]string{
		0: "AGGREGATION_PERIOD_UNSPECIFIED",
		1: "AGGREGATION_PERIOD_MINUTE",
		2: "AGGREGATION_PERIOD_HOUR",
		3: "AGGREGATION_PERIOD_DAY",
		4: "AGGREGATION_PERIOD_WEEK",
		5: "AGGREGATION_PERIOD_MONTH",
	}
	AggregationPeriod_value = map[string]int32{
		"AGGREGATION_PERIOD_UNSPECIFIED": 0,
		"AGGREGATION_PERIOD_MINUTE":      1,
		"AGGREGATION_PERIOD_HOUR":        2,
		"AGGREGATION_PERIOD_DAY":         3,
		"AGGREGATION_PERIOD_WEEK":        4,
		"AGGREGATION_PERIOD_MONTH":       5,
	}
)

func (x AggregationPeriod) Enum() *AggregationPeriod {
	p := new(AggregationPeriod)
	*p = x
	return p
}

func (x AggregationPeriod) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AggregationPeriod) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stats_v1_stats_proto_enumTypes[1].Descriptor()
}

func (AggregationPeriod) Type() protoreflect.EnumType {
	return &file_proto_stats_v1_stats_proto_enumTypes[1]
}

func (x AggregationPeriod) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AggregationPeriod.Descriptor instead.
func (AggregationPeriod) EnumDescriptor() ([]byte, []int) {
	return file_proto_stats_v1_stats_proto_rawDescGZIP(), []int{1}
}

type Source int32

const (
	Source_SOURCE_UNSPECIFIED Source = 0
	Source_SOURCE_TELEGRAM    Source = 1
	Source_SOURCE_VK          Source = 2
	Source_SOURCE_SITE        Source = 3
)

// Enum value maps for Source.
var (
	Source_name = map[int32]string{
		0: "SOURCE_UNSPECIFIED",
		1: "SOURCE_TELEGRAM",
		2: "SOURCE_VK",
		3: "SOURCE_SITE",
	}
	Source_value = map[string]int32{
		"SOURCE_UNSPECIFIED": 0,
		"SOURCE_TELEGRAM":    1,
		"SOURCE_VK":          2,
		"SOURCE_SITE":        3,
	}
)

func (x Source) Enum() *Source {
	p := new(Source)
	*p = x
	return p
}

func (x Source) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Source) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_stats_v1_stats_proto_enumTypes[2].Descriptor()
}

func (Source) Type() protoreflect.EnumType {
	return &file_proto_stats_v1_stats_proto_enumTypes[2]
}

func (x Source) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Source.Descriptor instead.
func (Source) EnumDescriptor() ([]byte, []int) {
	return file_proto_stats_v1_stats_proto_rawDescGZIP(), []int{2}
}

// Запрос для получения статистики по просмотрам **конкретной новости**
type GetViewsStatisticsForNewsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// ID новости, для которой запрашивается статистика
	NewsId string `protobuf:"bytes,1,opt,name=news_id,json=newsId,proto3" json:"news_id,omitempty"`
	// Период агрегации данных (например: "hour", "day", "week", "month")
	Period AggregationPeriod `protobuf:"varint,2,opt,name=period,proto3,enum=proto.stats.v1.AggregationPeriod" json:"period,omitempty"`
	// Временной диапазон для статистики
	TimeRange     TimeRange `protobuf:"varint,3,opt,name=time_range,json=timeRange,proto3,enum=proto.stats.v1.TimeRange" json:"time_range,omitempty"`
	Source        Source    `protobuf:"varint,4,opt,name=source,proto3,enum=proto.stats.v1.Source" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetViewsStatisticsForNewsRequest) Reset() {
	*x = GetViewsStatisticsForNewsRequest{}
	mi := &file_proto_stats_v1_stats_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetViewsStatisticsForNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewsStatisticsForNewsRequest) ProtoMessage() {}

func (x *GetViewsStatisticsForNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stats_v1_stats_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewsStatisticsForNewsRequest.ProtoReflect.Descriptor instead.
func (*GetViewsStatisticsForNewsRequest) Descriptor() ([]byte, []int) {
	return file_proto_stats_v1_stats_proto_rawDescGZIP(), []int{0}
}

func (x *GetViewsStatisticsForNewsRequest) GetNewsId() string {
	if x != nil {
		return x.NewsId
	}
	return ""
}

func (x *GetViewsStatisticsForNewsRequest) GetPeriod() AggregationPeriod {
	if x != nil {
		return x.Period
	}
	return AggregationPeriod_AGGREGATION_PERIOD_UNSPECIFIED
}

func (x *GetViewsStatisticsForNewsRequest) GetTimeRange() TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return TimeRange_TIME_RANGE_UNSPECIFIED
}

func (x *GetViewsStatisticsForNewsRequest) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_UNSPECIFIED
}

// Запрос для получения статистики по просмотрам **всем новостям**
type GetViewsStatisticsForAllNewsRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Период агрегации данных (например: "hour", "day", "week", "month")
	Period AggregationPeriod `protobuf:"varint,1,opt,name=period,proto3,enum=proto.stats.v1.AggregationPeriod" json:"period,omitempty"`
	// Временной диапазон для статистики
	TimeRange     TimeRange `protobuf:"varint,2,opt,name=time_range,json=timeRange,proto3,enum=proto.stats.v1.TimeRange" json:"time_range,omitempty"`
	Source        Source    `protobuf:"varint,3,opt,name=source,proto3,enum=proto.stats.v1.Source" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetViewsStatisticsForAllNewsRequest) Reset() {
	*x = GetViewsStatisticsForAllNewsRequest{}
	mi := &file_proto_stats_v1_stats_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetViewsStatisticsForAllNewsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewsStatisticsForAllNewsRequest) ProtoMessage() {}

func (x *GetViewsStatisticsForAllNewsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stats_v1_stats_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewsStatisticsForAllNewsRequest.ProtoReflect.Descriptor instead.
func (*GetViewsStatisticsForAllNewsRequest) Descriptor() ([]byte, []int) {
	return file_proto_stats_v1_stats_proto_rawDescGZIP(), []int{1}
}

func (x *GetViewsStatisticsForAllNewsRequest) GetPeriod() AggregationPeriod {
	if x != nil {
		return x.Period
	}
	return AggregationPeriod_AGGREGATION_PERIOD_UNSPECIFIED
}

func (x *GetViewsStatisticsForAllNewsRequest) GetTimeRange() TimeRange {
	if x != nil {
		return x.TimeRange
	}
	return TimeRange_TIME_RANGE_UNSPECIFIED
}

func (x *GetViewsStatisticsForAllNewsRequest) GetSource() Source {
	if x != nil {
		return x.Source
	}
	return Source_SOURCE_UNSPECIFIED
}

// Ответ с данными статистики по просмотрам **для конкретной новости**
type GetViewsStatisticsForNewsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Идентификатор новости, для которой запрашивается статистика
	NewsId string `protobuf:"bytes,1,opt,name=news_id,json=newsId,proto3" json:"news_id,omitempty"`
	// Список статистики по времени (например, по часам, дням и т.д.)
	Views         []*ViewData `protobuf:"bytes,2,rep,name=views,proto3" json:"views,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetViewsStatisticsForNewsResponse) Reset() {
	*x = GetViewsStatisticsForNewsResponse{}
	mi := &file_proto_stats_v1_stats_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetViewsStatisticsForNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewsStatisticsForNewsResponse) ProtoMessage() {}

func (x *GetViewsStatisticsForNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stats_v1_stats_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewsStatisticsForNewsResponse.ProtoReflect.Descriptor instead.
func (*GetViewsStatisticsForNewsResponse) Descriptor() ([]byte, []int) {
	return file_proto_stats_v1_stats_proto_rawDescGZIP(), []int{2}
}

func (x *GetViewsStatisticsForNewsResponse) GetNewsId() string {
	if x != nil {
		return x.NewsId
	}
	return ""
}

func (x *GetViewsStatisticsForNewsResponse) GetViews() []*ViewData {
	if x != nil {
		return x.Views
	}
	return nil
}

// Ответ с данными статистики по просмотрам **для всех новостей**
type GetViewsStatisticsForAllNewsResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Список статистики по времени (например, по часам, дням и т.д.)
	Views         []*ViewData `protobuf:"bytes,1,rep,name=views,proto3" json:"views,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetViewsStatisticsForAllNewsResponse) Reset() {
	*x = GetViewsStatisticsForAllNewsResponse{}
	mi := &file_proto_stats_v1_stats_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetViewsStatisticsForAllNewsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetViewsStatisticsForAllNewsResponse) ProtoMessage() {}

func (x *GetViewsStatisticsForAllNewsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stats_v1_stats_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetViewsStatisticsForAllNewsResponse.ProtoReflect.Descriptor instead.
func (*GetViewsStatisticsForAllNewsResponse) Descriptor() ([]byte, []int) {
	return file_proto_stats_v1_stats_proto_rawDescGZIP(), []int{3}
}

func (x *GetViewsStatisticsForAllNewsResponse) GetViews() []*ViewData {
	if x != nil {
		return x.Views
	}
	return nil
}

// Структура для одного элемента статистики
type ViewData struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Время (например, время начала дня, часа и т.д.)
	Time string `protobuf:"bytes,1,opt,name=time,proto3" json:"time,omitempty" db:"time"`  
	// Количество просмотров за данный период времени
	ViewsCount    uint64 `protobuf:"varint,2,opt,name=views_count,json=viewsCount,proto3" json:"views_count,omitempty" db:"views_count"`  
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ViewData) Reset() {
	*x = ViewData{}
	mi := &file_proto_stats_v1_stats_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ViewData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ViewData) ProtoMessage() {}

func (x *ViewData) ProtoReflect() protoreflect.Message {
	mi := &file_proto_stats_v1_stats_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ViewData.ProtoReflect.Descriptor instead.
func (*ViewData) Descriptor() ([]byte, []int) {
	return file_proto_stats_v1_stats_proto_rawDescGZIP(), []int{4}
}

func (x *ViewData) GetTime() string {
	if x != nil {
		return x.Time
	}
	return ""
}

func (x *ViewData) GetViewsCount() uint64 {
	if x != nil {
		return x.ViewsCount
	}
	return 0
}

var File_proto_stats_v1_stats_proto protoreflect.FileDescriptor

var file_proto_stats_v1_stats_proto_rawDesc = []byte{
	0x0a, 0x1a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x31,
	0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x22, 0xe0, 0x01, 0x0a,
	0x20, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74,
	0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49, 0x64, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61,
	0x6e, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52,
	0x61, 0x6e, 0x67, 0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12,
	0x2e, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22,
	0xca, 0x01, 0x0a, 0x23, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74,
	0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x52, 0x06, 0x70, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x12, 0x38, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73,
	0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x2e, 0x0a, 0x06,
	0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x6c, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x17, 0x0a, 0x07, 0x6e, 0x65, 0x77, 0x73, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x77, 0x73, 0x49, 0x64, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x69,
	0x65, 0x77, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44,
	0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x22, 0x56, 0x0a, 0x24, 0x47, 0x65,
	0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x2e, 0x0a, 0x05, 0x76, 0x69, 0x65, 0x77, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x52, 0x05, 0x76, 0x69, 0x65,
	0x77, 0x73, 0x22, 0x3f, 0x0a, 0x08, 0x56, 0x69, 0x65, 0x77, 0x44, 0x61, 0x74, 0x61, 0x12, 0x12,
	0x0a, 0x04, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x69,
	0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x76, 0x69, 0x65, 0x77, 0x73, 0x5f, 0x63, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x76, 0x69, 0x65, 0x77, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x2a, 0xf1, 0x01, 0x0a, 0x09, 0x54, 0x69, 0x6d, 0x65, 0x52, 0x61, 0x6e, 0x67,
	0x65, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x1a, 0x0a,
	0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x31, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x01, 0x12, 0x1c, 0x0a, 0x18, 0x54, 0x49, 0x4d,
	0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x32, 0x34, 0x5f,
	0x48, 0x4f, 0x55, 0x52, 0x53, 0x10, 0x02, 0x12, 0x1a, 0x0a, 0x16, 0x54, 0x49, 0x4d, 0x45, 0x5f,
	0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x37, 0x5f, 0x44, 0x41, 0x59,
	0x53, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x33, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x04,
	0x12, 0x1b, 0x0a, 0x17, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c,
	0x41, 0x53, 0x54, 0x5f, 0x39, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x05, 0x12, 0x1c, 0x0a,
	0x18, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54,
	0x5f, 0x31, 0x38, 0x30, 0x5f, 0x44, 0x41, 0x59, 0x53, 0x10, 0x06, 0x12, 0x1a, 0x0a, 0x16, 0x54,
	0x49, 0x4d, 0x45, 0x5f, 0x52, 0x41, 0x4e, 0x47, 0x45, 0x5f, 0x4c, 0x41, 0x53, 0x54, 0x5f, 0x31,
	0x5f, 0x59, 0x45, 0x41, 0x52, 0x10, 0x07, 0x2a, 0xca, 0x01, 0x0a, 0x11, 0x41, 0x67, 0x67, 0x72,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x22, 0x0a,
	0x1e, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10,
	0x00, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e,
	0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x49, 0x4e, 0x55, 0x54, 0x45, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f,
	0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x48, 0x4f, 0x55, 0x52, 0x10, 0x02, 0x12, 0x1a, 0x0a,
	0x16, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52,
	0x49, 0x4f, 0x44, 0x5f, 0x44, 0x41, 0x59, 0x10, 0x03, 0x12, 0x1b, 0x0a, 0x17, 0x41, 0x47, 0x47,
	0x52, 0x45, 0x47, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f,
	0x57, 0x45, 0x45, 0x4b, 0x10, 0x04, 0x12, 0x1c, 0x0a, 0x18, 0x41, 0x47, 0x47, 0x52, 0x45, 0x47,
	0x41, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x5f, 0x4d, 0x4f, 0x4e,
	0x54, 0x48, 0x10, 0x05, 0x2a, 0x55, 0x0a, 0x06, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49,
	0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45,
	0x5f, 0x54, 0x45, 0x4c, 0x45, 0x47, 0x52, 0x41, 0x4d, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x53,
	0x4f, 0x55, 0x52, 0x43, 0x45, 0x5f, 0x56, 0x4b, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x4f,
	0x55, 0x52, 0x43, 0x45, 0x5f, 0x53, 0x49, 0x54, 0x45, 0x10, 0x03, 0x32, 0xa6, 0x02, 0x0a, 0x15,
	0x4e, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x80, 0x01, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65,
	0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x4e,
	0x65, 0x77, 0x73, 0x12, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x53,
	0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72, 0x4e, 0x65, 0x77, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x89, 0x01, 0x0a, 0x1c, 0x47, 0x65, 0x74,
	0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x73, 0x12, 0x33, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x56, 0x69,
	0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x46, 0x6f, 0x72,
	0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x34,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2e, 0x76, 0x31, 0x2e,
	0x47, 0x65, 0x74, 0x56, 0x69, 0x65, 0x77, 0x73, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69,
	0x63, 0x73, 0x46, 0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x4e, 0x65, 0x77, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x42, 0x43, 0x5a, 0x41, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x47, 0x65, 0x6f, 0x72, 0x67, 0x69, 0x79, 0x47, 0x75, 0x73, 0x65, 0x76, 0x2f,
	0x67, 0x74, 0x72, 0x6b, 0x2d, 0x62, 0x61, 0x63, 0x6b, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x2f, 0x73, 0x74, 0x61, 0x74, 0x73, 0x2f, 0x76, 0x31, 0x3b, 0x73, 0x74, 0x61,
	0x74, 0x73, 0x5f, 0x67, 0x65, 0x6e, 0x5f, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_proto_stats_v1_stats_proto_rawDescOnce sync.Once
	file_proto_stats_v1_stats_proto_rawDescData = file_proto_stats_v1_stats_proto_rawDesc
)

func file_proto_stats_v1_stats_proto_rawDescGZIP() []byte {
	file_proto_stats_v1_stats_proto_rawDescOnce.Do(func() {
		file_proto_stats_v1_stats_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_stats_v1_stats_proto_rawDescData)
	})
	return file_proto_stats_v1_stats_proto_rawDescData
}

var file_proto_stats_v1_stats_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_proto_stats_v1_stats_proto_msgTypes = make([]protoimpl.MessageInfo, 5)
var file_proto_stats_v1_stats_proto_goTypes = []any{
	(TimeRange)(0),                               // 0: proto.stats.v1.TimeRange
	(AggregationPeriod)(0),                       // 1: proto.stats.v1.AggregationPeriod
	(Source)(0),                                  // 2: proto.stats.v1.Source
	(*GetViewsStatisticsForNewsRequest)(nil),     // 3: proto.stats.v1.GetViewsStatisticsForNewsRequest
	(*GetViewsStatisticsForAllNewsRequest)(nil),  // 4: proto.stats.v1.GetViewsStatisticsForAllNewsRequest
	(*GetViewsStatisticsForNewsResponse)(nil),    // 5: proto.stats.v1.GetViewsStatisticsForNewsResponse
	(*GetViewsStatisticsForAllNewsResponse)(nil), // 6: proto.stats.v1.GetViewsStatisticsForAllNewsResponse
	(*ViewData)(nil),                             // 7: proto.stats.v1.ViewData
}
var file_proto_stats_v1_stats_proto_depIdxs = []int32{
	1,  // 0: proto.stats.v1.GetViewsStatisticsForNewsRequest.period:type_name -> proto.stats.v1.AggregationPeriod
	0,  // 1: proto.stats.v1.GetViewsStatisticsForNewsRequest.time_range:type_name -> proto.stats.v1.TimeRange
	2,  // 2: proto.stats.v1.GetViewsStatisticsForNewsRequest.source:type_name -> proto.stats.v1.Source
	1,  // 3: proto.stats.v1.GetViewsStatisticsForAllNewsRequest.period:type_name -> proto.stats.v1.AggregationPeriod
	0,  // 4: proto.stats.v1.GetViewsStatisticsForAllNewsRequest.time_range:type_name -> proto.stats.v1.TimeRange
	2,  // 5: proto.stats.v1.GetViewsStatisticsForAllNewsRequest.source:type_name -> proto.stats.v1.Source
	7,  // 6: proto.stats.v1.GetViewsStatisticsForNewsResponse.views:type_name -> proto.stats.v1.ViewData
	7,  // 7: proto.stats.v1.GetViewsStatisticsForAllNewsResponse.views:type_name -> proto.stats.v1.ViewData
	3,  // 8: proto.stats.v1.NewsStatisticsService.GetViewsStatisticsForNews:input_type -> proto.stats.v1.GetViewsStatisticsForNewsRequest
	4,  // 9: proto.stats.v1.NewsStatisticsService.GetViewsStatisticsForAllNews:input_type -> proto.stats.v1.GetViewsStatisticsForAllNewsRequest
	5,  // 10: proto.stats.v1.NewsStatisticsService.GetViewsStatisticsForNews:output_type -> proto.stats.v1.GetViewsStatisticsForNewsResponse
	6,  // 11: proto.stats.v1.NewsStatisticsService.GetViewsStatisticsForAllNews:output_type -> proto.stats.v1.GetViewsStatisticsForAllNewsResponse
	10, // [10:12] is the sub-list for method output_type
	8,  // [8:10] is the sub-list for method input_type
	8,  // [8:8] is the sub-list for extension type_name
	8,  // [8:8] is the sub-list for extension extendee
	0,  // [0:8] is the sub-list for field type_name
}

func init() { file_proto_stats_v1_stats_proto_init() }
func file_proto_stats_v1_stats_proto_init() {
	if File_proto_stats_v1_stats_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_stats_v1_stats_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   5,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_stats_v1_stats_proto_goTypes,
		DependencyIndexes: file_proto_stats_v1_stats_proto_depIdxs,
		EnumInfos:         file_proto_stats_v1_stats_proto_enumTypes,
		MessageInfos:      file_proto_stats_v1_stats_proto_msgTypes,
	}.Build()
	File_proto_stats_v1_stats_proto = out.File
	file_proto_stats_v1_stats_proto_rawDesc = nil
	file_proto_stats_v1_stats_proto_goTypes = nil
	file_proto_stats_v1_stats_proto_depIdxs = nil
}
